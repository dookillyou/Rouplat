<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the player variables 
grav = 0.4;
hspd = 0;
vspd = 0;
player_spd = 4;
facing = 0; // 0 == left and 1 == right
firing_delay = 10; 

//Jumping
jump_total = 1;
can_jump = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player controls and collisions 
// Debugging Zone VVV
show_debug_message(facing); 
// Debugging Zone ^^^


//Set up input
key_right = keyboard_check(ord("D")); 
key_left = keyboard_check(ord("A"));
key_jump = keyboard_check_pressed(vk_space);
key_shoot = mouse_check_button(mb_left);
key_jump_held = keyboard_check(vk_space); 

//Create movement from inputs and other cals  
var move = key_right - key_left;
hspd = move * player_spd; 

if (key_left) facing = 0; else if (key_right) facing = 1;  

firing_delay = firing_delay -1;

vspd = vspd + grav; 

// Shooting 
if (key_shoot) &amp;&amp; (firing_delay &lt; 0)
{
firing_delay = 5

with(instance_create(x,y, obj_bullet))
{
speed = 25;
direction = point_direction(x,y,mouse_x,mouse_y) + irandom_range(-3,3); 
image_angle = direction; 
}
}

//jumping 
if (key_jump) &amp;&amp; (jump_total &gt;= 1) &amp;&amp; (can_jump == true)
{
vspd = -10; 
jump_total = jump_total - 1; 
}
if (vspd &lt; 0) &amp;&amp; (!key_jump_held) vspd = max(vspd,-player_spd/4); 


//Wall Sliding 
//(Create Scale Jumping Also with the wall jumping)
if (place_meeting(x+hspd,y,obj_wall_parent)) 
{
if (key_right) || (key_left)
{
vspd = 2;
}
}
//Wall Jumping 
if (place_meeting(x+hspd,y,obj_wall_parent) &amp;&amp; (key_jump)){
    can_jump = false;
    vspd = 0
    if(key_right){
        x += -20;
        if (place_meeting(x+15+hspd,y-15,obj_wall_parent)) {
            vspd = - 20; 
        } else {
            vspd = - 5;
        }
    }
    else if (key_left){
        x += 20;
        if (place_meeting(x-15+hspd,y-15,obj_wall_parent)) {
            vspd = - 20;  
        } else {
            vspd = - 5;
        }
    }
}else can_jump = true; 

// Horz Collision
if (place_meeting(x+hspd,y,obj_wall_parent))
 {
 jump_total = 1; 
 while(!place_meeting(x+sign(hspd),y,obj_wall_parent))
{
x += sign(hspd);
}
 
hspd = 0  
 }
 
x += hspd; 
 
// Vert Collisions
if (place_meeting(x,y+vspd,obj_wall_parent))
{
 jump_total = 1; 
 while(!place_meeting(x,y+sign(vspd),obj_wall_parent))
{
y += sign(vspd);
}
 
vspd = 0  
}

/*if (place_meeting(x,y+vspd,obj_roof_wall))
{
 
 while(!place_meeting(x,y+sign(vspd),obj_wall_parent))
{
y += sign(vspd);
}
 
vspd = 0  
}
*/
y += vspd;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
